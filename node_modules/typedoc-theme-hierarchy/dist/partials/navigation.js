"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.navigation = void 0;
const typedoc_1 = require("typedoc");
/**
 * Рендерит панель навигации.
 */
const navigation = (urlTo) => (props) => {
    const categories = formatFileHierarchy(props.model.project.children || []);
    return (typedoc_1.JSX.createElement("div", { class: 'tree' },
        typedoc_1.JSX.createElement(Navigation, Object.assign({}, categories, { urlTo: urlTo }))));
};
exports.navigation = navigation;
const Navigation = ({ id, categories, items, urlTo, }) => (typedoc_1.JSX.createElement("ul", { class: 'js-category-list category', "data-id": id },
    Object.entries(categories).map(([key, item]) => (typedoc_1.JSX.createElement("li", null,
        typedoc_1.JSX.createElement("span", { class: 'js-category-title category__title', "data-id": item.id },
            typedoc_1.JSX.createElement("div", { class: 'category__folder js-category-icon', "data-id": item.id }),
            key),
        typedoc_1.JSX.createElement(Navigation, { id: item.id, categories: item.categories, items: item.items, urlTo: urlTo })))),
    items.map((item) => {
        var _a;
        return (typedoc_1.JSX.createElement("li", null,
            typedoc_1.JSX.createElement("a", { class: 'category__link js-category-link category__link--ts', href: urlTo(item), "data-id": item.url && `/${item.url}` }, item.title),
            typedoc_1.JSX.createElement("ul", null, (_a = item.children) === null || _a === void 0 ? void 0 : _a.map((subItem) => (typedoc_1.JSX.createElement("li", { class: subItem.cssClasses },
                typedoc_1.JSX.createElement("a", { class: 'category__link tsd-kind-icon js-category-link', href: urlTo(subItem), "data-id": subItem.url && `/${subItem.url}` }, subItem.name)))))));
    })));
const formatFileHierarchy = (values) => {
    const result = {
        items: [],
        categories: {},
        id: 'root',
    };
    for (const item of values) {
        const titleSplit = (item.name || '').split('/');
        addToCategory(result, item, titleSplit, 0);
    }
    return result;
};
const addToCategory = (category, item, titleSplit, idx) => {
    var _a, _b, _c;
    if (idx === titleSplit.length - 1) {
        if (!category.items) {
            // eslint-disable-next-line no-param-reassign
            category.items = [];
        }
        const fileName = (_c = (_b = (_a = item === null || item === void 0 ? void 0 : item.sources) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.file) === null || _c === void 0 ? void 0 : _c.name;
        if (!fileName) {
            return;
        }
        category.items.push(Object.assign(Object.assign({}, item), { title: fileName }));
        return;
    }
    const title = titleSplit[idx];
    if (!title) {
        return;
    }
    if (!category.categories[title]) {
        // eslint-disable-next-line no-param-reassign
        category.categories[title] = {
            items: [],
            categories: {},
            id: `${category.id}-${title}`,
        };
    }
    const categoryToAdd = category.categories[title];
    if (!categoryToAdd) {
        return;
    }
    addToCategory(categoryToAdd, item, titleSplit, idx + 1);
};
